#!/usr/bin/env python3
"""
CFD Visualization Script
Creates animations from VTK output files generated by the CFD framework
"""

import numpy as np
import matplotlib.pyplot as plt
import matplotlib.animation as animation
from matplotlib.patches import Rectangle
import glob
import os

def read_vtk_file(filename):
    """Read a VTK structured points file and extract data"""
    with open(filename, 'r') as f:
        lines = f.readlines()

    # Parse header
    dimensions = None
    origin = None
    spacing = None
    data_start = None

    for i, line in enumerate(lines):
        if line.startswith('DIMENSIONS'):
            dimensions = [int(x) for x in line.split()[1:4]]
        elif line.startswith('ORIGIN'):
            origin = [float(x) for x in line.split()[1:4]]
        elif line.startswith('SPACING'):
            spacing = [float(x) for x in line.split()[1:4]]
        elif line.startswith('POINT_DATA'):
            data_start = i + 1
            break

    if not all([dimensions, origin, spacing, data_start]):
        raise ValueError(f"Invalid VTK file format: {filename}")

    nx, ny = dimensions[0], dimensions[1]

    # Create coordinate arrays
    x = np.linspace(origin[0], origin[0] + (nx-1)*spacing[0], nx)
    y = np.linspace(origin[1], origin[1] + (ny-1)*spacing[1], ny)
    X, Y = np.meshgrid(x, y)

    # Parse data fields
    data_fields = {}
    i = data_start

    while i < len(lines):
        line = lines[i].strip()
        if line.startswith('SCALARS'):
            field_name = line.split()[1]
            i += 2  # Skip LOOKUP_TABLE line

            # Read scalar data
            field_data = []
            while i < len(lines) and not lines[i].strip().startswith(('SCALARS', 'VECTORS')):
                values = lines[i].strip().split()
                field_data.extend([float(v) for v in values])
                i += 1

            # Reshape to grid
            field_data = np.array(field_data).reshape((ny, nx))
            data_fields[field_name] = field_data
        else:
            i += 1

    return X, Y, data_fields

def create_velocity_magnitude(u, v):
    """Calculate velocity magnitude from u and v components"""
    return np.sqrt(u**2 + v**2)

def animate_field(vtk_files, field_name='velocity_magnitude', save_animation=True):
    """Create animation of a specific field"""

    # Read all files and extract data
    frames_data = []
    times = []

    for filename in sorted(vtk_files):
        try:
            X, Y, data_fields = read_vtk_file(filename)

            if field_name == 'velocity_magnitude':
                if 'u' in data_fields and 'v' in data_fields:
                    field_data = create_velocity_magnitude(data_fields['u'], data_fields['v'])
                else:
                    print(f"Warning: u and v components not found in {filename}")
                    continue
            elif field_name in data_fields:
                field_data = data_fields[field_name]
            else:
                print(f"Warning: Field '{field_name}' not found in {filename}")
                continue

            frames_data.append(field_data)
            # Extract iteration number from filename
            iteration = int(os.path.basename(filename).split('_')[-1].split('.')[0])
            times.append(iteration)

        except Exception as e:
            print(f"Error reading {filename}: {e}")
            continue

    if not frames_data:
        print("No valid data found!")
        return

    # Set up the figure and axis
    fig, ax = plt.subplots(figsize=(12, 6))

    # Calculate global min/max for consistent colormap
    vmin = min(np.min(frame) for frame in frames_data)
    vmax = max(np.max(frame) for frame in frames_data)

    # Create initial plot
    im = ax.imshow(frames_data[0], extent=[X.min(), X.max(), Y.min(), Y.max()],
                   origin='lower', aspect='auto', vmin=vmin, vmax=vmax, cmap='viridis')

    # Add colorbar
    cbar = plt.colorbar(im, ax=ax)
    cbar.set_label(field_name.replace('_', ' ').title())

    # Set labels
    ax.set_xlabel('X')
    ax.set_ylabel('Y')
    ax.set_title(f'CFD Simulation - {field_name.replace("_", " ").title()}')

    # Add iteration counter
    time_text = ax.text(0.02, 0.95, '', transform=ax.transAxes,
                       bbox=dict(boxstyle='round', facecolor='white', alpha=0.8))

    def animate(frame):
        im.set_array(frames_data[frame])
        time_text.set_text(f'Iteration: {times[frame]}')
        return [im, time_text]

    # Create animation
    anim = animation.FuncAnimation(fig, animate, frames=len(frames_data),
                                 interval=200, blit=True, repeat=True)

    # Save animation
    if save_animation:
        output_file = f'visualization/visualization_output/cfd_animation_{field_name}.gif'
        print(f"Saving animation to {output_file}...")
        anim.save(output_file, writer='pillow', fps=5)
        print(f"Animation saved as {output_file}")

    plt.tight_layout()
    plt.show()

    return anim

def create_streamline_animation(vtk_files, save_animation=True):
    """Create streamline animation"""

    frames_data = []
    times = []

    for filename in sorted(vtk_files):
        try:
            X, Y, data_fields = read_vtk_file(filename)

            if 'u' in data_fields and 'v' in data_fields:
                frames_data.append((data_fields['u'], data_fields['v']))
                iteration = int(os.path.basename(filename).split('_')[-1].split('.')[0])
                times.append(iteration)
        except Exception as e:
            print(f"Error reading {filename}: {e}")
            continue

    if not frames_data:
        print("No valid velocity data found!")
        return

    fig, ax = plt.subplots(figsize=(12, 6))

    def animate(frame):
        ax.clear()
        u, v = frames_data[frame]

        # Create streamlines
        ax.streamplot(X, Y, u, v, color=np.sqrt(u**2 + v**2),
                     cmap='viridis', density=2, linewidth=1)

        ax.set_xlabel('X')
        ax.set_ylabel('Y')
        ax.set_title(f'CFD Streamlines - Iteration: {times[frame]}')
        ax.set_xlim(X.min(), X.max())
        ax.set_ylim(Y.min(), Y.max())

    anim = animation.FuncAnimation(fig, animate, frames=len(frames_data),
                                 interval=200, repeat=True)

    if save_animation:
        output_file = 'visualization/visualization_output/cfd_streamlines.gif'
        print(f"Saving streamline animation to {output_file}...")
        anim.save(output_file, writer='pillow', fps=5)
        print(f"Animation saved as {output_file}")

    plt.tight_layout()
    plt.show()

    return anim

def main():
    """Main function to create CFD animations"""

    # Create output directory if it doesn't exist
    os.makedirs("visualization/visualization_output", exist_ok=True)

    # Find all VTK files
    vtk_pattern = "output/output_optimized_*.vtk"
    vtk_files = glob.glob(vtk_pattern)

    if not vtk_files:
        print(f"No VTK files found matching pattern: {vtk_pattern}")
        print("Make sure you've run the CFD simulation first!")
        return

    print(f"Found {len(vtk_files)} VTK files")

    # Create different animations
    print("\n1. Creating velocity magnitude animation...")
    animate_field(vtk_files, 'velocity_magnitude')

    print("\n2. Creating pressure animation...")
    animate_field(vtk_files, 'p')

    print("\n3. Creating streamline animation...")
    create_streamline_animation(vtk_files)

    print("\nAll animations created!")

if __name__ == "__main__":
    main()