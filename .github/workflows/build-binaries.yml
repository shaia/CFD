name: Build and Release Binaries

# This workflow serves two purposes:
# 1. PR Validation: Build and test all platforms when PRs are opened/updated to master/main
#    - If any build fails, the PR cannot be merged (GitHub branch protection rules)
#    - Artifacts are uploaded temporarily for PR review (7 days retention)
# 2. Release Creation: When version tags (v*) are pushed, create GitHub releases
#    - Build all platforms and create downloadable release archives
#    - Users can find releases at: https://github.com/USER/REPO/releases

on:
  push:
    tags:
      - 'v*'  # Only trigger on version tags like v1.0.0
  pull_request:
    branches:
      - master
      - main
    types: [opened, synchronize, reopened]  # Trigger on PR events
  workflow_dispatch:  # Allow manual trigger for testing

env:
  BUILD_TYPE: Release
  CTEST_OUTPUT_ON_FAILURE: 1

jobs:
  build-matrix:
    name: Build ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          # Windows builds
          - {
              name: "Windows MSVC x64",
              os: windows-latest,
              generator: "Visual Studio 17 2022",
              arch: "x64",
              build_type: "Release",
              cc: "cl",
              cxx: "cl",
              artifact_name: "cfd-windows-x64"
            }
          - {
              name: "Windows MSVC x86",
              os: windows-latest,
              generator: "Visual Studio 17 2022",
              arch: "Win32",
              build_type: "Release",
              cc: "cl",
              cxx: "cl",
              artifact_name: "cfd-windows-x86"
            }

          # Linux builds
          - {
              name: "Linux GCC x64",
              os: ubuntu-latest,
              generator: "Unix Makefiles",
              build_type: "Release",
              cc: "gcc",
              cxx: "g++",
              artifact_name: "cfd-linux-x64"
            }
          - {
              name: "Linux Clang x64",
              os: ubuntu-latest,
              generator: "Unix Makefiles",
              build_type: "Release",
              cc: "clang",
              cxx: "clang++",
              artifact_name: "cfd-linux-clang-x64"
            }

          # macOS builds
          - {
              name: "macOS x64",
              os: macos-13,  # Intel Mac
              generator: "Unix Makefiles",
              build_type: "Release",
              cc: "clang",
              cxx: "clang++",
              artifact_name: "cfd-macos-x64"
            }
          - {
              name: "macOS ARM64",
              os: macos-latest,  # Apple Silicon
              generator: "Unix Makefiles",
              build_type: "Release",
              cc: "clang",
              cxx: "clang++",
              artifact_name: "cfd-macos-arm64"
            }

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Cache CMake build
        uses: actions/cache@v4
        with:
          path: build
          key: ${{ runner.os }}-${{ matrix.config.artifact_name }}-build-${{ hashFiles('**/CMakeLists.txt') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.config.artifact_name }}-build-

      # Linux setup
      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake ninja-build

      # macOS setup
      - name: Install macOS dependencies
        if: runner.os == 'macOS'
        run: |
          brew install cmake ninja

      # Windows setup
      - name: Setup MSVC
        if: runner.os == 'Windows'
        uses: microsoft/setup-msbuild@v1.3

      - name: Configure CMake
        run: |
          mkdir -p build
          cd build

          # Set compiler environment variables
          if [ "$RUNNER_OS" == "Linux" ] || [ "$RUNNER_OS" == "macOS" ]; then
            export CC=${{ matrix.config.cc }}
            export CXX=${{ matrix.config.cxx }}
          fi

          # Configure based on platform
          if [ "$RUNNER_OS" == "Windows" ]; then
            cmake .. -G "${{ matrix.config.generator }}" -A ${{ matrix.config.arch }} \
              -DCMAKE_BUILD_TYPE=${{ matrix.config.build_type }} \
              -DBUILD_SHARED_LIBS=ON \
              -DBUILD_EXAMPLES=ON \
              -DBUILD_TESTS=ON
          else
            cmake .. -G "${{ matrix.config.generator }}" \
              -DCMAKE_BUILD_TYPE=${{ matrix.config.build_type }} \
              -DBUILD_SHARED_LIBS=ON \
              -DBUILD_EXAMPLES=ON \
              -DBUILD_TESTS=ON \
              -DCMAKE_C_COMPILER=${{ matrix.config.cc }} \
              -DCMAKE_CXX_COMPILER=${{ matrix.config.cxx }}
          fi
        shell: bash

      - name: Build
        run: |
          cd build
          if [ "$RUNNER_OS" == "Windows" ]; then
            cmake --build . --config ${{ matrix.config.build_type }} --parallel
          else
            cmake --build . --parallel $(nproc 2>/dev/null || sysctl -n hw.ncpu 2>/dev/null || echo 4)
          fi
        shell: bash

      - name: Test
        run: |
          cd build
          if [ "$RUNNER_OS" == "Windows" ]; then
            ctest -C ${{ matrix.config.build_type }} --output-on-failure
          else
            ctest --output-on-failure
          fi
        shell: bash

      - name: Package binaries
        run: |
          # Create distribution directory
          mkdir -p dist/${{ matrix.config.artifact_name }}
          cd dist/${{ matrix.config.artifact_name }}

          # Copy binaries based on platform
          if [ "$RUNNER_OS" == "Windows" ]; then
            # Windows: Copy only library files (.lib, .dll)
            find ../../build -name "*.lib" -exec cp {} . \;
            find ../../build -name "*.dll" -exec cp {} . \;
            find ../../build -name "*.pdb" -exec cp {} . \; 2>/dev/null || true

            # Copy headers
            mkdir -p include
            cp -r ../../lib/include/* include/

            # Create info file
            echo "CFD Library - Windows ${{ matrix.config.arch }} Release" > README.txt
            echo "Built on: $(date)" >> README.txt
            echo "Compiler: MSVC" >> README.txt
            echo "" >> README.txt
            echo "Files included:" >> README.txt
            echo "- cfd_library.lib (static library)" >> README.txt
            echo "- cfd_library.dll (dynamic library)" >> README.txt
            echo "- include/ (header files)" >> README.txt

          else
            # Linux/macOS: Copy library files only (.so/.dylib, .a)
            if [ "$RUNNER_OS" == "Linux" ]; then
              find ../../build -name "*.so*" -exec cp {} . \;
              LIB_EXT="so"
            else
              find ../../build -name "*.dylib*" -exec cp {} . \;
              LIB_EXT="dylib"
            fi

            # Copy static libraries
            find ../../build -name "*.a" -exec cp {} . \;


            # Copy headers
            mkdir -p include
            cp -r ../../lib/include/* include/

            # Create info file
            echo "CFD Library - ${{ matrix.config.name }} Release" > README.txt
            echo "Built on: $(date)" >> README.txt
            echo "Compiler: ${{ matrix.config.cc }}" >> README.txt
            echo "" >> README.txt
            echo "Files included:" >> README.txt
            echo "- libcfd_library.a (static library)" >> README.txt
            if [ "$RUNNER_OS" == "Linux" ]; then
              echo "- libcfd_library.so (shared library)" >> README.txt
            else
              echo "- libcfd_library.dylib (shared library)" >> README.txt
            fi
            echo "- include/ (header files)" >> README.txt
          fi

          # List contents
          echo "" >> README.txt
          echo "Directory contents:" >> README.txt
          ls -la >> README.txt
        shell: bash

      - name: Create archive
        run: |
          cd dist
          if [ "$RUNNER_OS" == "Windows" ]; then
            # Create ZIP for Windows
            powershell -Command "Compress-Archive -Path '${{ matrix.config.artifact_name }}/*' -DestinationPath '${{ matrix.config.artifact_name }}.zip'"
          else
            # Create tar.gz for Unix systems
            tar -czf ${{ matrix.config.artifact_name }}.tar.gz ${{ matrix.config.artifact_name }}/
          fi
        shell: bash

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.config.artifact_name }}
          path: |
            dist/${{ matrix.config.artifact_name }}.*
          # Longer retention for tag builds (releases), shorter for PR validation
          retention-days: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') && 90 || 7 }}

      - name: Generate build summary
        run: |
          echo "## Build Summary: ${{ matrix.config.name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **OS**: ${{ runner.os }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Compiler**: ${{ matrix.config.cc }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Architecture**: ${{ matrix.config.arch || 'x64' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Type**: ${{ matrix.config.build_type }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Show binary info
          cd dist/${{ matrix.config.artifact_name }}
          echo "### Generated Files:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          ls -la >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

  # Status check job - Required for PR merges
  # This job will fail if any of the build-matrix jobs fail
  build-status:
    name: Build Status Check
    runs-on: ubuntu-latest
    needs: build-matrix
    if: always()  # Run even if some builds fail

    steps:
      - name: Check build results
        run: |
          # Check if all builds succeeded
          if [[ "${{ needs.build-matrix.result }}" == "success" ]]; then
            echo "✅ All builds passed successfully!"
            echo "Build Status: SUCCESS" >> $GITHUB_STEP_SUMMARY
            echo "All platforms built and tested successfully." >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ One or more builds failed!"
            echo "Build Status: FAILED" >> $GITHUB_STEP_SUMMARY
            echo "Check individual build jobs for details." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

  create-release:
    name: Create GitHub Release
    needs: build-matrix
    runs-on: ubuntu-latest
    # Only create releases when building from tags, not PRs
    if: startsWith(github.ref, 'refs/tags/') && github.event_name == 'push'

    permissions:
      contents: write  # Required for creating releases

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release files
        run: |
          echo "Downloaded artifacts structure:"
          ls -la artifacts/

          # Create a release directory and move all archives
          mkdir -p release-files
          # Use find -exec for safe file handling (handles spaces and special characters)
          find artifacts \( -name "*.zip" -o -name "*.tar.gz" \) -exec sh -c '
            for file do
              cp "$file" release-files/
              echo "Prepared: $(basename "$file")"
            done
          ' sh {} +

          echo "Release files prepared:"
          ls -la release-files/

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v1
        with:
          name: CFD Library ${{ github.ref_name }}
          body: |
            ## CFD Library Release ${{ github.ref_name }}

            🚀 **Cross-platform binaries for the CFD simulation library**

            ### 📥 Available Downloads:

            **Windows:**
            - `cfd-windows-x64.zip` - Windows 64-bit (MSVC)
            - `cfd-windows-x86.zip` - Windows 32-bit (MSVC)

            **Linux:**
            - `cfd-linux-x64.tar.gz` - Linux 64-bit (GCC)
            - `cfd-linux-clang-x64.tar.gz` - Linux 64-bit (Clang)

            **macOS:**
            - `cfd-macos-x64.tar.gz` - macOS Intel (x64)
            - `cfd-macos-arm64.tar.gz` - macOS Apple Silicon (ARM64)

            ### 📦 What's Included:
            - Static libraries (`.a`, `.lib`)
            - Shared libraries (`.so`, `.dylib`, `.dll`)
            - Header files for C/C++ integration
            - Build documentation and examples

            ### 🔧 Quick Start:
            1. Download the appropriate archive for your platform
            2. Extract to your project directory
            3. Link against the library files
            4. Include the header files in your project

            📖 See `README.txt` in each archive for detailed integration instructions.

            ### ✅ Tested Platforms:
            - Windows 10/11 (x64, x86)
            - Ubuntu Linux (GCC, Clang)
            - macOS (Intel & Apple Silicon)

            ---
            *Built with GitHub Actions • All binaries tested before release*
          files: release-files/*
          draft: false
          prerelease: false